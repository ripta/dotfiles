[toplevel]

whoami = sts get-caller-identity

info = !f() {
    env | sort | grep -e AWS_ -e SHLVL | cat
  }; f

login = sso login

logout = sso logout

relog = !f() {
    aws sso logout
    aws sso login
  }; f

switch = !aws-choose-profile

profiles = !f() {
    aws configure list-profiles | sort
  }; f

zone-by-name = !f() {
    aws route53 list-hosted-zones-by-name \
        --max-items 1 \
        --dns-name "$1" \
        --query 'HostedZones[0].{
            Count: ResourceRecordSetCount,
            Name: Name,
            Private: Config.PrivateZone,
            Id: Id
        }'
  }; f

zone-rrs = !f() {
    HZ=$(aws zone-by-name $1)
    HZID=$(echo "$HZ" | jq -r .Id)
    HZNAME=$(echo "$HZ" | jq -r .Name)
    if ! echo "$HZNAME" | grep "^$1" >/dev/null
    then
      echo "$HZNAME does not match $1"
      exit 1
    fi
    aws route53 list-resource-record-sets \
        --hosted-zone-id $HZID \
        --output text
  }; f

# aws find-by-ip 10.11.74.84
find-by-ip = !f() {
    aws ec2 describe-instances \
        --output json \
        --filter "Name=private-ip-address,Values=$1" \
        --query 'Reservations[0].Instances[0].{
            InstanceId: InstanceId,
            PublicIpAddress: PublicIpAddress,
            PrivateIpAddress: PrivateIpAddress,
            State: State.Name,
            StateReason: StateReason.Message,
            Name: Tags[?Key==`Name`].Value|[0]
        }'
  }; f

# aws find-by-name www1
find-by-name = !f() {
    aws ec2 describe-instances \
        --output json \
        --filter "Name=tag:Name,Values=$1" \
        --query 'Reservations[0].Instances[0].{
            InstanceId: InstanceId,
            PublicIpAddress: PublicIpAddress,
            PrivateIpAddress: PrivateIpAddress,
            State: State.Name,
            StateReason: StateReason.Message,
            Name: Tags[?Key==`Name`].Value|[0]
        }'
  }; f

# aws find-by-names www1*
find-by-names = !f() {
    aws ec2 describe-instances \
        --output json \
        --filter "Name=tag:Name,Values=$1" \
        --query 'Reservations[*].Instances[*].{
            InstanceId: InstanceId,
            PublicIpAddress: PublicIpAddress,
            PrivateIpAddress: PrivateIpAddress,
            State: State.Name,
            StateReason: StateReason.Message,
            Name: Tags[?Key==`Name`].Value|[0]
        }'
  }; f

list-instances = !f() {
    aws ec2 describe-instances \
        --output table \
        --query 'Reservations[*].Instances[*].{
            InstanceId: InstanceId,
            PublicIpAddress: PublicIpAddress,
            PrivateIpAddress: PrivateIpAddress,
            State: State.Name,
            Name: Tags[?Key==`Name`].Value|[0]
        }'
  }; f

list-lcs = !f() {
    aws autoscaling describe-launch-configurations \
        --output table \
        --query 'LaunchConfigurations[*].LaunchConfigurationName'
  }; f

list-sgs = !f() {
    aws ec2 describe-security-groups \
        --output table \
        --query 'SecurityGroups[*].GroupName'
  }; f

# aws start-instance sandbox-01.dev-ue2
start-instance = !f() {
    INSTANCE=$(aws find-by-name $1)
    IID=$(echo "$INSTANCE" | jq -r .InstanceId)
    ISTATE=$(echo "$INSTANCE" | jq -r .State)
    [[ -z "$IID" || "$IID" == "null" ]] && echo "Instance '$1' not found" && exit 1
    [ "$ISTATE" != "stopped" ] && echo "Instance $IID is already $ISTATE" && exit
    echo "Instance $IID currently $ISTATE"
    echo "Starting..."
    aws ec2 start-instances --instance-ids "$IID"
    echo "Waiting for $IID to start..."
    aws ec2 wait instance-running --instance-ids "$IID"
  }; f

# aws choke-instance sandbox-01.dev-ue1
choke-instance = !f() {
    INSTANCE=$(aws find-by-name $1)
    IID=$(echo "$INSTANCE" | jq -r .InstanceId)
    ISTATE=$(echo "$INSTANCE" | jq -r .State)
    [[ -z "$IID" || "$IID" == "null" ]] && echo "Instance '$1' not found" && exit 1
    [ "$ISTATE" = "stopped" ] && echo "Instance $IID is already stopped" && exit
    echo "Instance $IID currently $ISTATE"
    echo "Stopping..."
    aws ec2 stop-instances --instance-ids "$IID"
    echo "Waiting for $IID to stop..."
    aws ec2 wait instance-stopped --instance-ids "$IID" || {
      echo "Failed to stop. Force stopping..."
      aws ec2 stop-instances --instance-ids "$IID" --force
      echo "Waiting for $IID to stop..."
      aws ec2 wait instance-stopped --instance-ids "$IID"
    }
  }; f

# aws get-all-versions BUCKET-NAME PREFIX-ID TARGET-DIR
get-all-versions = !f() {
    BUCKET="$1"
    PREFIX="$2"
    TARGET="$3"
    SESSFILE="$(mktemp)"
    BUFFER="${SESSFILE}.txt"
    LOG="${SESSFILE}.log"
    mkdir -p $TARGET
    set -euo pipefail
    aws s3api list-object-versions --bucket $BUCKET --prefix $PREFIX \
      | jq -r '.Versions[] | .VersionId + " " + .LastModified + " " + (.IsLatest | tostring) + " " + .Key' > $BUFFER
    echo "Found $(wc -l $BUFFER) objects..." >&2
    echo "Logging to $LOG" >&2
    cat $BUFFER \
      | while read VID MOD CUR KEY; do \
          mkdir -p $TARGET/$KEY $TARGET/$KEY/.ts
          echo "$BUCKET $KEY $VID $TARGET/$KEY/$VID" | tee -a $LOG
          if [ ! -f "$TARGET/$KEY/$VID" ]; then
            aws s3api get-object --bucket $BUCKET --key $KEY --version-id $VID $TARGET/$KEY/$VID >> $LOG
            touch -t "$(echo $MOD | tr -d 'T-:.Z' | cut -c1-12)" $TARGET/$KEY/$VID
          fi
          if [ "$CUR" = "true" ]; then
            (cd $TARGET/$KEY; ln -sf $VID LATEST)
          fi
          (cd $TARGET/$KEY/.ts; ln -f ../$VID $(echo $MOD | tr -d ':'))
        done
  }; f

# aws exec-as 123456789012
# aws exec-as 123456789012 aws s3 ls
exec-as = !f() {
    assume-role-exec $@
  }; f

# Execute a command in every account:
#   aws exec-every-as aws s3 ls
exec-every-as= !f() {
    if [[ $# -lt 1 ]]
    then
      echo "Usage: aws exec-every-as <command>" >&2
      exit 1
    fi
    aws organizations list-accounts \
      --query 'Accounts[].[Id]' \
      --output text \
      | while read ACCTID; do \
          aws exec-as $ACCTID $@
        done
  }; f
